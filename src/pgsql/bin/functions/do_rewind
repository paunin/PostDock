#!/usr/bin/env bash

echo `date` > $MASTER_SYNC_LOCK_FILE
echo ">>> Rewinding to the latest state"

TRY_TO_FOLLOW_CLUSTER_MASTER=`PGCONNECT_TIMEOUT=$CHECK_PGCONNECT_TIMEOUT PGPASSWORD=$REPLICATION_PASSWORD  psql -h $CURRENT_REPLICATION_PRIMARY_HOST -U $REPLICATION_USER -p $REPLICATION_PRIMARY_PORT $REPLICATION_DB -tAc "SELECT count(*) FROM $(get_repmgr_schema).$REPMGR_NODES_TABLE WHERE (type='primary' OR type='master') AND conninfo LIKE '%host=$CURRENT_REPLICATION_PRIMARY_HOST%'"`

if [[ "$MASTER_SLAVE_SWITCH" == "1" ]] || [ "$TRY_TO_FOLLOW_CLUSTER_MASTER" == "1" ]; then
    echo ">>>>>> Start server to be able to rewind (weird hack to avoid dirty shutdown issue)"
    rm -rf $PGDATA/pg_xlog/archive_status/
    rm $PGDATA/postmaster.pid
    gosu postgres pg_ctl -D "$PGDATA"  -o "-c listen_addresses='localhost'" -w start

    echo ">>>>>> Removing unactive replication slots of partners"
    close_partners_slots

    echo ">>>>>> Stop server"
    gosu postgres pg_ctl stop

    echo ">>>>>> Creating replication slot for the standby in case it's not there"
    REPLICATION_SLOT=`cat $PGDATA/recovery.conf | grep primary_slot_name | awk -F" = " '{print $2}'`
    if [ "$REPLICATION_SLOT" != "" ]; then
        echo ">>>>>>>>> Creating $REPLICATION_SLOT"
        PGCONNECT_TIMEOUT=$CHECK_PGCONNECT_TIMEOUT PGPASSWORD=$REPLICATION_PASSWORD  psql -h $CURRENT_REPLICATION_PRIMARY_HOST -U $REPLICATION_USER -p $REPLICATION_PRIMARY_PORT $REPLICATION_DB -c "SELECT * FROM pg_create_physical_replication_slot('$REPLICATION_SLOT')"
    fi

	echo ">>>>>> Rejoin cluster. new primary: $CURRENT_REPLICATION_PRIMARY_HOST"
    gosu postgres repmgr node rejoin -f $REPMGR_CONFIG_FILE --force-rewind --verbose --log-level DEBUG  -h $CURRENT_REPLICATION_PRIMARY_HOST -p $REPLICATION_PRIMARY_PORT -d $REPLICATION_DB -U $REPLICATION_USER -D $PGDATA

    echo ">>>>>> Starting server to register"
    gosu postgres pg_ctl -D "$PGDATA"  -o "-c listen_addresses='$CLUSTER_NODE_NETWORK_NAME'" -w start

    echo ">>>>>> Register"
    gosu postgres repmgr -f $REPMGR_CONFIG_FILE standby register --verbose
fi


if [ "$TRY_TO_FOLLOW_CLUSTER_MASTER" == "0" ]; then
    echo ">>>>>> Repmgr can follow only main cluster master"
else
    echo ">>>>>> Stop server"
    gosu postgres pg_ctl stop
fi

rm -rf $MASTER_SYNC_LOCK_FILE
